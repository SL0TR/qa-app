{"version":3,"sources":["services/httpService.js","config.js","services/authService.js","components/context/GlobalState.js","pages/Home/index.js","components/Forms/genericForm.js","pages/Login/index.js","services/userService.js","pages/Register/index.js","components/Header/index.js","services/questionService.js","components/Question/index.js","services/answerService.js","pages/Questions/index.js","components/User/index.js","components/QA/index.js","pages/Users/index.js","App.js","serviceWorker.js","index.js"],"names":["http","axios","create","withCredentials","headers","interceptors","response","use","error","status","toast","message","errMsg","data","msg","console","log","Promise","reject","get","post","delete","put","all","config","backendUrl","apiEndpoint","apiEndpointMe","apiEndpointSignOut","login","user","a","me","signout","setUserLocalStorage","window","localStorage","userId","_id","userEmail","email","userIsAdmin","isAdmin","GlobalContext","React","createContext","GLobalState","children","history","useState","currUser","setCurrUser","questions","setQuestions","setIsAdmin","onSubmit","userData","location","href","Provider","value","Home","useContext","className","Button","as","Link","to","variant","GenericForm","useForm","handleSubmit","register","errors","Form","Group","controlId","Control","name","placeholder","ref","required","pattern","type","maxLength","minLength","password","Row","Col","xs","style","width","Login","useEffect","lg","registerUser","getAllUsers","Register","push","Header","handleSignout","Navbar","collapseOnSelect","expand","bg","Brand","Toggle","aria-controls","Collapse","id","Nav","Item","exact","activeClassName","onClick","registerQuestion","question","getAllQuestions","deleteQuestion","Question","index","admin","state","handleChange","handleDelete","newQuestions","filter","ques","Label","text","onChange","getUserAnswer","Questions","setQuestion","setState","event","target","prevState","map","arr","answers","ans","author","forEach","el","handleQuestionSubmit","e","preventDefault","handleAnswerSubmit","key","ansArray","promises","answer","i","User","QA","setAnswer","ansData","questionId","Users","users","setUsers","projectsData","Accordion","defaultActiveKey","Card","cursor","eventKey","toString","Body","App","position","pauseOnHover","closeOnClick","autoClose","Container","path","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.84337a1c.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst http = axios.create({\r\n  withCredentials: true,\r\n  headers: {\r\n    'Accept': 'application/json',\r\n    'Content-Type': 'application/json',\r\n  }\r\n});\r\n\r\nhttp.interceptors.response.use(null, error => {\r\n  const expectedError = error.response && \r\n    error.response.status >= 400 && \r\n    error.response.status <500;\r\n  \r\n  if (!expectedError) {\r\n    toast.error(error.message);\r\n  }\r\n  const errMsg = error.response.data.msg || error.message;\r\n  console.log(errMsg);\r\n  toast.error(errMsg);\r\n\r\n  return Promise.reject(error);\r\n})\r\n\r\nexport default {\r\n  get: http.get,\r\n  post: http.post,\r\n  delete: http.delete,\r\n  put: http.put,\r\n  all: http.all\r\n}","const config = {\r\n  backendUrl: 'https://roar-task.herokuapp.com'\r\n}\r\n\r\nexport default config;","import http from '../services/httpService';\r\nimport config from '../config.js';\r\n\r\nconst apiEndpoint = config.backendUrl + '/api/auth';\r\nconst apiEndpointMe = config.backendUrl +  '/api/me';\r\nconst apiEndpointSignOut = config.backendUrl +'/api/signout';\r\n\r\nexport async function login(user) {\r\n  return http.post(apiEndpoint, user);\r\n}\r\n\r\nexport async function me() {\r\n  return http.get(apiEndpointMe);\r\n}\r\n\r\nexport async function signout() {\r\n  return http.post(apiEndpointSignOut);\r\n  \r\n}\r\n\r\nexport function setUserLocalStorage(user) {\r\n  window.localStorage.userId = user._id;\r\n  window.localStorage.userEmail = user.email;\r\n  window.localStorage.userIsAdmin = user.isAdmin;\r\n}\r\n\r\nexport function checkUserLocalStorate() {\r\n  if( window.localStorage.userId && window.localStorage.userEmail && window.localStorage.userIsAdmin )  {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport function getUserLocalStorage() {\r\n  return {\r\n    _id: window.localStorage.userId,\r\n    email: window.localStorage.userEmail,\r\n    isAdmin: window.localStorage.userIsAdmin\r\n  }\r\n}\r\n\r\nexport function removeUserLocalStorage(user) {\r\n  window.localStorage.userId = '';\r\n  window.localStorage.userEmail = '';\r\n  window.localStorage.userIsAdmin = '';\r\n}","import React, { useState } from 'react';\r\nimport { login, setUserLocalStorage } from '../../services/authService';\r\nexport const GlobalContext = React.createContext();\r\n\r\nconst GLobalState = ({ children, history }) => {\r\n\r\n  const [currUser, setCurrUser] = useState(null);\r\n  const [questions, setQuestions] = useState([]);\r\n  const [isAdmin, setIsAdmin] = useState(false);\r\n  \r\n\r\n  const onSubmit = async userData => {\r\n    const { data: { user } } = await login(userData);\r\n    if(user) {\r\n      setUserLocalStorage(user);\r\n      setCurrUser(user);\r\n      window.location.href = '/';\r\n    }\r\n  };\r\n\r\n  return ( \r\n    <GlobalContext.Provider value={{\r\n      onSubmit,\r\n      currUser,\r\n      setCurrUser,\r\n      setQuestions,\r\n      questions,\r\n      isAdmin,\r\n      setIsAdmin\r\n    }}>\r\n      {children}\r\n    </GlobalContext.Provider>\r\n   );\r\n}\r\n \r\nexport default GLobalState;","import React, { useContext} from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { GlobalContext } from '../../components/context/GlobalState';\r\nimport { Button } from 'react-bootstrap';\r\nconst Home = () => {\r\n  const { currUser } = useContext(GlobalContext);\r\n\r\n  return ( \r\n    <header className=\"bg-dark p-5 mb-5\">\r\n      <div className=\"container h-100\">\r\n        <div className=\"row h-100 align-items-center\">\r\n          <div className=\"col-lg-12\">\r\n            <h1 className=\"display-4 text-white mt-5 mb-2\">ABC Limited</h1>\r\n            <p className=\"lead mb-5 text-white-50\">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Non possimus ab labore provident mollitia. Id assumenda voluptate earum corporis facere quibusdam quisquam iste ipsa cumque unde nisi, totam quas ipsam.</p>\r\n            {\r\n              currUser && (\r\n                <Button as={Link} to=\"/questions\" variant=\"outline-light\" className=\"outline text-black\">Visit Out Questions page</Button>\r\n              )\r\n            }\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n \r\nexport default Home;","import React from 'react';\r\nimport { Form, Button, Row, Col } from 'react-bootstrap';\r\nimport useForm from \"react-hook-form\";\r\n\r\nconst GenericForm = ({ onSubmit }) => {\r\n\r\n  const { handleSubmit, register, errors } = useForm();\r\n\r\n  return (\r\n    <Form onSubmit={handleSubmit(onSubmit)}>\r\n      <Form.Group controlId=\"formBasicEmail\">\r\n        <Form.Control\r\n          name=\"email\"\r\n          placeholder=\"Enter Email\"\r\n          ref={register({\r\n            required: 'Required',\r\n            pattern: {\r\n              value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\r\n              message: \"invalid email address\"\r\n            }\r\n          })}\r\n        />\r\n        {errors.email && errors.email.message}\r\n      </Form.Group>\r\n      <Form.Group controlId=\"formBasicPassword\">\r\n        <Form.Control\r\n          placeholder=\"Enter Password\"\r\n          type=\"password\"\r\n          name=\"password\"\r\n          ref={register({\r\n            required: 'Required',\r\n            maxLength: 10,\r\n            minLength: 3,\r\n          })}\r\n        />\r\n        {errors.password &&\r\n       errors.password.type === 'required' &&\r\n       'Your input is required'}\r\n       {errors.password &&\r\n       errors.password.type === 'maxLength' &&\r\n       'Your input exceeded max character if 10'}\r\n       {errors.password &&\r\n       errors.password.type === 'minLength' &&\r\n       'Your input needs to be more than 2 characters'}\r\n      </Form.Group>\r\n      <Row className=\"justify-content-md-center\">\r\n        <Col xs={12}>\r\n          <Button style={{ width: '100%'}} variant=\"dark\" type=\"submit\">\r\n          Submit\r\n        </Button>\r\n        </Col>\r\n      </Row>\r\n      \r\n    </Form>\r\n   );\r\n}\r\n \r\nexport default GenericForm;","import React, { useContext, useEffect } from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport GenericForm from '../../components/Forms/genericForm';\r\nimport { GlobalContext } from '../../components/context/GlobalState';\r\n\r\nconst Login = () => {\r\n\r\n  const { onSubmit, currUser } = useContext(GlobalContext);\r\n\r\n  useEffect(() => {\r\n    if(currUser) {\r\n      toast('Successfully Signed In!');\r\n      // window.location.href = '/';\r\n    }\r\n  }, [currUser])\r\n\r\n  return (\r\n    <Row className=\"justify-content-md-center mt-5\">\r\n      <Col xs={12}><h2 className=\"text-center mb-5\">Login</h2></Col>\r\n      <Col lg={4} xs={12}>\r\n        <GenericForm onSubmit={onSubmit}/>\r\n      </Col>\r\n    </Row>\r\n   );\r\n}\r\n \r\nexport default Login;","import http from './httpService';\r\nimport config from '../config.js';\r\n\r\nconst apiEndpoint = config.backendUrl +  '/api/users';\r\n\r\nexport async function registerUser (user) {\r\n  return http.post(apiEndpoint, user);\r\n}\r\n\r\nexport async function getAllUsers (user) {\r\n  return http.get(apiEndpoint, user);\r\n}\r\n","import React, { useContext, useEffect } from 'react'\r\nimport { toast } from 'react-toastify';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { registerUser } from '../../services/userService';\r\nimport GenericForm from '../../components/Forms/genericForm';\r\nimport { GlobalContext } from '../../components/context/GlobalState';\r\n\r\nconst Register = ( { history }) => {\r\n\r\n  const { currUser, setCurrUser } = useContext(GlobalContext);\r\n\r\n\r\n  useEffect(() => {\r\n    if(currUser) {\r\n      history.push('/');\r\n    }\r\n  }, [currUser, history])\r\n\r\n  const onSubmit = async user => {\r\n    const { data } = await registerUser(user);\r\n    if(data) {\r\n      toast('User registration successful!');\r\n      setCurrUser(data.user);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Row className=\"justify-content-md-center mt-5\">\r\n      <Col xs={12}><h2 className=\"text-center mb-5\">User Registration</h2></Col>\r\n      <Col xs={4}>\r\n        <GenericForm onSubmit={onSubmit}/>\r\n      </Col>\r\n    </Row>\r\n   );\r\n}\r\n \r\nexport default Register;","import React, { useContext, useEffect } from 'react';\r\nimport { NavLink, Link } from 'react-router-dom';\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\nimport { GlobalContext } from '../context/GlobalState';\r\nimport { signout, removeUserLocalStorage, me } from '../../services/authService';\r\nimport { toast } from 'react-toastify';\r\nconst Header = () => {\r\n\r\n  const { currUser, setCurrUser, isAdmin, setIsAdmin } = useContext(GlobalContext);\r\n\r\n  const handleSignout = async  () => {\r\n    const { data } = await signout();\r\n    if(data) {\r\n      toast(data.msg)\r\n      setCurrUser(null);\r\n      removeUserLocalStorage();\r\n      window.location.href = '/login';\r\n    }\r\n  }\r\n\r\n  // Route Protection\r\n  useEffect(() => {\r\n    (async() => {\r\n      try { \r\n        const { data } = await me();\r\n        setIsAdmin(data.isAdmin);\r\n      } catch(e) {\r\n        console.log('no login', e)\r\n      }\r\n    })();\r\n      \r\n  }, [setIsAdmin]);\r\n\r\n  return (\r\n    <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n      <Navbar.Brand to=\"/\" as={Link} >ABC Limited</Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n      <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n        <Nav className=\"ml-auto\">\r\n          <Nav.Item>\r\n            <NavLink exact  activeClassName=\"active\" className=\"nav-link mr-3\"to=\"/\">Home</NavLink>\r\n          </Nav.Item>\r\n          { currUser && (\r\n            <Nav.Item>\r\n              <NavLink exact activeClassName=\"active\" className=\"nav-link mr-3\" to=\"/questions\" >Questions</NavLink>\r\n            </Nav.Item>\r\n          )}\r\n          {\r\n            isAdmin && (\r\n              <Nav.Item>\r\n                <NavLink exact activeClassName=\"active\" className=\"nav-link mr-3\" to=\"/users\" >Users</NavLink>\r\n              </Nav.Item>\r\n            )\r\n          }\r\n          { !currUser && (\r\n            <Nav.Item>\r\n              <NavLink exact activeClassName=\"active\" className=\"nav-link mr-3\" to=\"/login\" >Login</NavLink>\r\n            </Nav.Item>\r\n          )}\r\n          { !currUser && (\r\n            <Nav.Item>\r\n              <NavLink exact  activeClassName=\"active\" className=\"nav-link\" to=\"/register\" >Register</NavLink>\r\n            </Nav.Item>\r\n          )}\r\n          { currUser && (\r\n            <Nav.Item>\r\n              <Nav.Link onClick={handleSignout}>Sign Out</Nav.Link>\r\n            </Nav.Item>\r\n          )}\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n   );\r\n}\r\n \r\nexport default Header;","import http from './httpService';\r\nimport config from '../config.js';\r\n\r\nconst apiEndpoint = config.backendUrl + '/api/questions';\r\n\r\nexport function registerQuestion (question) {\r\n  return http.post(apiEndpoint, question);\r\n}\r\n\r\nexport async function getAllQuestions () {\r\n  return http.get(apiEndpoint);\r\n}\r\n\r\n\r\nexport async function deleteQuestion (id) {\r\n  return http.delete(apiEndpoint + `/${id}`);\r\n}\r\n","import React, { useContext } from 'react'\r\nimport {  Row, Col, Form, Button } from 'react-bootstrap';\r\nimport { deleteQuestion } from '../../services/questionService';\r\nimport { GlobalContext } from '../context/GlobalState';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst Question = ({ question, index, admin, state, handleChange }) => {\r\n  \r\n  const { questions, setQuestions } = useContext(GlobalContext);\r\n\r\n  const handleDelete = async id => {\r\n    const { data: { _id } } = await deleteQuestion(id);\r\n    const newQuestions = [...questions].filter(ques => ques._id !== _id);\r\n    setQuestions(newQuestions);\r\n    toast('Question Deleted!');\r\n  }\r\n\r\n  return (\r\n    <Row className=\"justify-content-center align-items-center mb-3\">\r\n      <Col lg={admin ? 10 : 12 } xs={12} >\r\n        <Form.Label>{ index+1 + '. ' + question.text }</Form.Label>\r\n        {\r\n          !admin && (\r\n            <Form.Control value={state[question._id]} name={question._id} onChange={handleChange}  type=\"text\" placeholder=\"Enter answer\" />\r\n          )\r\n        }\r\n      </Col>\r\n      {/* <Answer question={question} answers={question.answers} /> */}\r\n      { admin && (\r\n        <Col lg={2} xs={12} className=\"mb-2\">\r\n          <Button style={{ width: '100%' }} onClick={() => { handleDelete(question._id)}}  variant=\"danger\" >Delete</Button>\r\n        </Col>\r\n      )}\r\n    </Row>\r\n   );\r\n}\r\n\r\nexport default Question;","import http from './httpService';\r\n\r\nimport config from '../config.js';\r\n\r\nconst apiEndpoint = config.backendUrl + '/api/answers';\r\n\r\nexport function registerAnswer (answer) {\r\n  return http.post(apiEndpoint, answer);\r\n}\r\n\r\nexport async function getAllAnswers () {\r\n  return http.get(apiEndpoint);\r\n}\r\n\r\n\r\nexport async function deleteAnswer(id) {\r\n  return http.delete(apiEndpoint + `/${id}`);\r\n}\r\n\r\nexport async function getUserAnswer(data) {\r\n  return http.post(apiEndpoint + `/useranswer`, data);\r\n}\r\n","import React, { useContext, useEffect, useState } from 'react'\r\nimport { GlobalContext } from '../../components/context/GlobalState';\r\nimport { Row, Col, Form, Button } from 'react-bootstrap';\r\nimport { getAllQuestions, registerQuestion } from '../../services/questionService';\r\nimport Question from '../../components/Question';\r\nimport { registerAnswer } from '../../services/answerService';\r\nimport { me } from '../../services/authService';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst Questions = ({ history }) => {\r\n  const { questions, setQuestions, currUser, setIsAdmin, isAdmin } = useContext(GlobalContext);\r\n  const [ question, setQuestion ] = useState('');\r\n  const [state, setState] = useState({});\r\n\r\n  // Update input elements on change\r\n  function handleChange(event) {\r\n    const { name, value } = event.target;\r\n    setState(prevState => ({ ...prevState, [name]: value }));\r\n  }\r\n\r\n  // Route Protection\r\n  useEffect(() => {\r\n    (async() => {\r\n      try { \r\n        const { data } = await me();\r\n        setIsAdmin(data.isAdmin);\r\n      } catch(e) {\r\n        console.log('no login', e)\r\n        history.push('/');\r\n      }\r\n    })();\r\n      \r\n  }, [history, setIsAdmin]);\r\n\r\n  // Get All Questions and update state\r\n  useEffect(() => {\r\n    (async () => {\r\n      const { data: questions } = await getAllQuestions();\r\n      if(questions) {\r\n        const userId = window.localStorage.userId;\r\n\r\n        // console.log(questions.questions);\r\n        let newQuestions = [...questions.questions];\r\n\r\n        newQuestions = newQuestions.map(ques => {\r\n          const arr = ques.answers.filter(ans => ans.author._id === userId);\r\n          return {\r\n            ...ques,\r\n            answers: arr\r\n          }\r\n        })\r\n\r\n        // Update state based on questions.\r\n        newQuestions.forEach(ques => {\r\n          ques.answers.forEach(el => {\r\n            setState(prevState => ({ ...prevState, [el.question]: el.text }));\r\n          })\r\n        })\r\n        setQuestions(newQuestions);\r\n      }\r\n    })();\r\n    \r\n  }, [setQuestions])\r\n\r\n  // Submit New Question submission\r\n  const handleQuestionSubmit = async e => {\r\n    e.preventDefault();\r\n    \r\n    const { data} = await registerQuestion({\r\n      text: question\r\n    });\r\n\r\n    if(data) {\r\n      // console.log(data);\r\n      setQuestion('');\r\n      setQuestions(prevState => ([ data, ...prevState ]));\r\n      toast('New Question Created!');\r\n    }\r\n  }\r\n\r\n  // Handle new Answer\r\n  const handleAnswerSubmit = async e => {\r\n    e.preventDefault();\r\n    const ansArray = [];\r\n    \r\n    for (var key in state) {\r\n      const ans = {\r\n        text: state[key],\r\n        author: currUser._id,\r\n        question: key\r\n      }\r\n      ansArray.push(ans)\r\n    }\r\n\r\n    const promises = ansArray.map(el => {\r\n      return registerAnswer(el);\r\n    });\r\n\r\n    // console.log(promises);\r\n    const res = await Promise.all(promises);\r\n    if(res) {\r\n      toast('Submission Successful!');\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Row>\r\n        {\r\n          isAdmin && (\r\n            <Col xs={12}>\r\n              <Form onSubmit={ e => { handleQuestionSubmit(e) }}>\r\n                <Row>\r\n                  <Col lg={10} xs={12}>\r\n                    <Form.Group controlId=\"formBasicEmail\" >\r\n                      <Form.Control value={question} onChange={e => { setQuestion(e.target.value) } }  type=\"text\" placeholder=\"Enter Your Question\" />\r\n                    </Form.Group>\r\n                  </Col>\r\n                  <Col lg={2} xs={12}>\r\n                    <Button style={{ width: '100%'}}  variant=\"dark\" type=\"submit\">\r\n                      Submit\r\n                    </Button>\r\n                  </Col>\r\n                </Row>\r\n              </Form>\r\n            </Col>\r\n          )\r\n        }\r\n        <Col xs={12} className=\"mt-5\">\r\n          <Form onSubmit={handleAnswerSubmit}>\r\n          { questions.map( (ques, i) => <Question handleChange={handleChange} state={state} setState={setState} key={i} index={i} admin={isAdmin} question={ques} />)}\r\n          {\r\n            !isAdmin && (\r\n              <Button className=\"mt-2\" type=\"submit\" variant=\"dark\">Submit</Button>\r\n            )\r\n          }\r\n          </Form>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n   );\r\n}\r\n \r\nexport default Questions;","import React, { useEffect , useContext} from 'react';\r\nimport { me, checkUserLocalStorate, getUserLocalStorage } from '../../services/authService';\r\nimport { GlobalContext } from '../context/GlobalState';\r\n\r\nconst User = ({ children }) => {\r\n\r\n  const { setCurrUser, setIsAdmin } = useContext(GlobalContext);\r\n\r\n \r\n  useEffect(() => {\r\n    ( async () => {\r\n      if ( checkUserLocalStorate() ) {\r\n        setCurrUser(getUserLocalStorage())\r\n      } else {\r\n        const { data: user } = await me();\r\n        if (user) {\r\n          setCurrUser(user);\r\n          setIsAdmin(user.isAdmin);\r\n        }\r\n      }\r\n\r\n    })()\r\n  }, [setCurrUser, setIsAdmin])\r\n\r\n  return <>{children} </>\r\n}\r\n \r\nexport default User;","import React, { useEffect, useState } from 'react'\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { getUserAnswer } from '../../services/answerService';\r\n\r\nconst QA = ({ ques, user }) => {\r\n\r\n  const [answer, setAnswer] = useState('');\r\n\r\n  useEffect(() => {\r\n\r\n    (async() => {\r\n      const ansData = {\r\n        questionId: ques._id,\r\n        userId: user._id\r\n      }\r\n  \r\n      const data = await getUserAnswer(ansData);\r\n\r\n      if(data && data.data ) {\r\n        setAnswer(data.data.text);\r\n      } else {\r\n        setAnswer('No answer yet');\r\n      }\r\n  \r\n    })()\r\n\r\n  }, [ques, user])\r\n\r\n  return (\r\n    <Row>\r\n      <Col xs={12}>\r\n        <p className=\"lead\"><em> {ques.text ? ques.text : 'loading...'} </em></p>\r\n        <blockquote className=\"blockquote\">\r\n          <p className=\"mb-0\">{answer  ? answer : 'loading...'}</p>\r\n        </blockquote>\r\n      </Col>\r\n    </Row>\r\n   );\r\n}\r\n \r\nexport default QA;","import React, { useState, useEffect, useContext } from 'react'\r\nimport { getAllUsers } from '../../services/userService';\r\nimport { Row, Col, Accordion, Card } from 'react-bootstrap';\r\nimport { GlobalContext } from '../../components/context/GlobalState';\r\nimport { getAllQuestions } from '../../services/questionService';\r\nimport QA from '../../components/QA';\r\n// import { getUserAnswer } from '../../services/answerService';\r\n\r\nconst Users = () => {\r\n  const [users, setUsers] = useState([]);\r\n  // const [qa, setQa] = useState([]);\r\n  const { questions, setQuestions  } = useContext(GlobalContext);\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    (async() => {\r\n      const promises = [getAllUsers(), getAllQuestions()]\r\n\r\n      const [userData, projectsData] = await Promise.all(promises);\r\n\r\n      if(userData) {\r\n        setUsers(userData.data.users)\r\n      }\r\n      \r\n      if(projectsData) {\r\n        // console.log(projectsData.data.questions)\r\n        setQuestions(projectsData.data.questions);\r\n      }\r\n      \r\n    })()\r\n  }, [setQuestions])\r\n\r\n\r\n  // useEffect(() => {\r\n\r\n    \r\n  //   (async() => {\r\n\r\n  //   const arr = users.map(user => {\r\n  //     return {\r\n  //       user: user.email,\r\n  //       qList: questions.map(ques => {\r\n  //         return {\r\n  //           questionId: ques._id,\r\n  //           userId: user._id,\r\n  //         }\r\n  //       })\r\n  //     }\r\n  //   })\r\n  \r\n  //     // setQa(arr)\r\n  //   if(users.length !== 0 && questions.length !== 0) {\r\n      \r\n  //     const promises = arr.map(el => {\r\n  //       let data;\r\n  //       el.qList.forEach(el => {\r\n  //         data = getUserAnswer(el)\r\n  //         // data = 'test'\r\n  //       })\r\n  //       return data;\r\n  //     })\r\n\r\n  //     console.log(promises);\r\n\r\n  //     var t0 = performance.now();\r\n\r\n  //     const res = await Promise.all(promises);\r\n      \r\n  //     if(res) {\r\n\r\n  //       console.log(res)\r\n  //       var t1 = performance.now();\r\n  //       console.log(\"Call to doSomething took \" + (t1 - t0) + \" milliseconds.\")\r\n  //     }\r\n  //   }\r\n  //   })()\r\n     \r\n    \r\n\r\n  // }, [questions, users])\r\n\r\n\r\n  return (\r\n    <Row>\r\n      <Col xs={12}>\r\n        <Accordion defaultActiveKey=\"0\">\r\n          {\r\n            users.map((user, i) => (\r\n              <Card key={user._id}>\r\n                <Card.Header style={{ cursor: 'pointer' }}>\r\n                  <Accordion.Toggle as=\"h4\" eventKey={i.toString()} >\r\n                  &#9786; { user.email }\r\n                  </Accordion.Toggle>\r\n                </Card.Header>\r\n                <Accordion.Collapse eventKey={i.toString()}>\r\n                  <Card.Body>\r\n                    { questions && questions.map(ques => (\r\n                      <QA user={user} key={ques._id}  ques={ques} />\r\n                    )) }\r\n                  </Card.Body>\r\n                </Accordion.Collapse>\r\n              </Card>\r\n            ))\r\n          }\r\n        </Accordion>\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\n \r\nexport default Users;","import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport { Route } from 'react-router-dom';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport Home from './pages/Home';\r\nimport Login from './pages/Login';\r\nimport Register from './pages/Register';\r\nimport Header from './components/Header';\r\nimport Questions from './pages/Questions';\r\nimport GLobalState from './components/context/GlobalState';\r\nimport User from './components/User';\r\nimport Users from './pages/Users';\r\n\r\nconst App = () => {\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Route>\r\n        {({ history }) =>  (\r\n          <GLobalState history={history}>\r\n            <User>\r\n              <ToastContainer position=\"top-center\" pauseOnHover  closeOnClick  autoClose={2000}/>\r\n              <Header />\r\n              <Container className=\"py-5\">\r\n                <Route exact path=\"/\" component={Home} />\r\n                <Route exact path=\"/login\" component={Login} />\r\n                <Route exact path=\"/users\" component={Users} />\r\n                <Route exact path=\"/questions\" component={Questions} />\r\n                <Route exact path=\"/register\" component={Register} />\r\n              </Container>\r\n            </User>\r\n        </GLobalState>\r\n        )}\r\n        </Route>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport { HashRouter as Router } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router><App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}